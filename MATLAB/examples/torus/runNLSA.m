function [ model, In ] = runNLSA( experiment, iProc, nProc, ifPlot )
%
% This function creates an NLSA model and executes the various NLSA steps 
% for data generated by the dynamical system on the 2-torus in torusData.m  
%
% Each step saves the results on disk, so one can resume a partially completed
% calculation by commenting out the steps in this function which have been 
% already exectuted. 
%
% Similarly, if one changes the NLSA model parameters specified in the function
% torusNLSAModel, it is only necessary to repeat the steps that are
% affected by the parameter changes. (E.g., if the diffusion maps bandwidth 
% parameter is changed, the steps up to the distance symmetrization can be
% skipped.)
%
% Input arguments:
%
% experiment:   A string identifier for the NLSA model, passed to
%               the function torusNLSAModel
%
% iProc, nProc: These arguments provide rudimentary paralelization features for 
%               certain steps in the code that support it. Setting nProc > 1 
%               means that the computation is divided into nProc batches. These
%                batches can be executed in parallel by launching nProc 
%               instances of Matlab and running this function with iProc set to
%               1 for instance #1, 2 for instance #2, ...     
%               
% ifPlot:       Set to true to make basic eigenfunction scatterplots
%
% To display the optimal bandwidth from automatic bandwidth for the diffusion 
% operator, run the following command (only available for gl_mb diffusion 
% operators):
%
% [ epsilonOpt, Info ] = computeOptimalBandwidth( model );
%
% To recover the computed eigenfunctions and the projected and reconstructed 
% data, run the following commands:
%
% Diffusion eigenfunctions:
% phi = getDiffusionEigenfunctions( model ); 
% 
% Projected target data onto the diffusion eigenfunctions:
% a = getProjectedData( model );
%
% Reconstructed data: 
% x = getReconstructedData( model );
%  
% SVD spatial patterns
% u = getSVDSpatialPatterns( model );
%
% SVD temporal patterns
% v = getSVDTemporalPatterns( model );
%
% SVD reconstucted data
% x = getSVDReconstructedData( model );
% 
% Modified 2016/01/24

% Default input arguments
if nargin == 0
    experiment = 'linear_flow'; 
end
if nargin <= 1 
    iProc = 1;
    nProc = 1;
end

if nargin <= 3
    ifPlot = false;
end

disp( experiment )
[ model, In ] = torusNLSAModel( experiment ); 


disp( 'Takens delay embedding' ); computeDelayEmbedding( model )

% The next step is only needed for velocity-dependent distances such as 
% the "at" and "cone" distances
disp( 'Phase space velocity' ); computeVelocity( model )

% The next step is only needed if the target data are different from the 
% source data
disp( 'Takens delay embedding, target data' ); computeTrgDelayEmbedding( model )

fprintf( 'Pairwise distances, %i/%i\n', iProc, nProc ); 
computePairwiseDistances( model, iProc, nProc )

disp( 'Distance symmetrization' ); symmetrizeDistances( model )

% The next step is only needed for automatic bandwidth selection
%disp( 'Kernel sum' ); computeKernelDoubleSum( model )

disp( 'Diffusion eigenfunctions' ); computeDiffusionEigenfunctions( model )

disp( 'Projection of target data onto diffusion eigenfunctions' );
computeProjection( model );

disp( 'Reconstruction of the projected data' )
computeReconstruction( model )

disp( 'SVD of the projected target data' )
computeSVD( model )

disp( 'SVD temporal patterns' )
computeSVDTemporalPatterns( model )

disp( 'Reconstruction of the SVD modes' )
computeSVDReconstruction( model )


%% BASIC PLOTS
if ifPlot
    x  =  getSrcData( model );                     % in-sample data
    phi = getDiffusionEigenfunctions( model );     % in-sample eigenfunctions

    idxPhiPlot = 5; % eigenfunction to plot

    % The following only works for data embedded in R3

    % Diffusion eigenfunctions
    figure;
    scatter3( x( 1, In.nXB + 1 : end - In.nXA ), ...
              x( 2, In.nXB + 1 : end - In.nXA ), ...
              x( 3, In.nXB + 1 : end - In.nXA ), 10, phi( :, idxPhiPlot ) )
    view( 20, 80 )
    title( [ 'phi' int2str( idxPhiPlot ) ] )

end
