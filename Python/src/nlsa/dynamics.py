"""Provide generic functions for dynamical systems computations. """
from collections.abc import Callable, Generator, Iterable
from nlsa.abstract_algebra import identity
from nlsa.function_algebra import compose
from typing import Concatenate


def semigroup[X](f: Callable[[X], X]) -> Generator[Callable[[X], X], None,
                                                   None]:
    """Make Generator implementing semigroup generated by map."""
    g = identity
    while True:
        yield g
        g = compose(f, g)


def orbit[X](x0: X, f: Callable[[X], X]) -> Generator[X, None, None]:
    """Make Generator implementing orbit of a point under a map."""
    x = x0
    while True:
        yield x
        x = f(x)


def cocycle_orbit[X, Y](y0: Y, xs: Iterable[X], f: Callable[[X, Y], Y]) \
        -> Generator[Y, None, None]:
    """Make Generator implementing orbit of a point under a cocycle.

    :y0: Initial condition.
    :xs: Base space trajectory.
    :returns: Generator of cocycle trajectory.
    """
    y = y0
    for x in xs:
        yield y
        y = f(x, y)


def from_autonomous[X, TX, **P](v: Callable[[X], TX]) \
        -> Callable[Concatenate[float, X, P], TX]:
    """Make time-dependent vector field from autonomous vector field."""
    def f(t: float, x: X, *args: P.args, **kwargs: P.kwargs) -> TX:
        y = v(x)
        return y
    return f
